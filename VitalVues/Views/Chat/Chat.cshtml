<head>
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
</head>

<div class="container">
    <div id="Button" class="fas fa-fire"></div>
</div>
<div class="chat-holder-buttons">
    <button href="#"><span class="fas fa-heart"></span></button>
    <button href="#"><span class="fas fa-hourglass-half"></span></button>
    <button href="#"><span class="fas fa-spoon"></span></button>
    <button href="#"><span class="fas fa-asterisk"></span></button>
</div>

<canvas></canvas>

<div id="content">
</div>
<div class="chat-holder">
    <body>
        <div class="chat-container">
            <div id="chatOutput" class="output"></div>
            <form id="promptForm" class="input-form">
                <textarea id="promptInput" placeholder="Ask 'TODO: Type of {question}' a Question..." required></textarea>
                <button type="submit" id="sendButton" class="btn btn-primary">
                    <span class="spinner-border spinner-border-sm" aria-hidden="true" style="display: none;" id="spinner"></span>
                    <span id="buttonText">Send</span>
                </button>
            </form>
        </div>
    </body>
</div>

<div class="previous-chats">
    @if (1 == 1)
    {
        var chat = "SAMPLE";
        var listDChats = new List<string>();
        listDChats.Add(chat);
        listDChats.Add(chat);
        listDChats.Add(chat);
        listDChats.Add(chat);
        listDChats.Add(chat);
        <div class="chats">
            @foreach (var c in listDChats)
            {
                <div class="chat-title">
                    <a>@c.ToString()</a>
                </div>
            }
        </div>


    }

</div>
<div class="input-group" style="display: none; position: absolute;">
    <div class="input-group-text"></div>
    <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
           class="form-control"
           id="submissionDate"
           placeholder="Date of Test" />
</div>
<script>
    var canvas = $('canvas')[0];
    var context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    var Projectile;
    var State = false;
    var Explode = false;
    var Collapse = false;
    var Particles = [];

    var colors = ["#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#9b59b6", "#f1c40f", "#e67e22", "#e74c3c"];

    function Proj() {
        this.radius = 5.2;
        this.x = canvas.width;
        this.y = canvas.height + this.radius;
        this.color = "#e74c3c";
        this.velocity = { x: 0, y: 0 };
        this.speed = 12;
    }

    Proj.prototype = {
        Update: function () {
            if (this.x > (canvas.width / 2) && this.x - (canvas.width / 2) <= 10 || this.x < (canvas.width / 2) && (canvas.width / 2) - this.x <= 10) {
                Explode = true;
                $('.chat-holder-buttons').addClass('active');
            } else {
                this.dx = (canvas.width / 2) - this.x;
                this.dy = (canvas.height / 2) - this.y;
                this.distance = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
                this.velocity.x = (this.dx / this.distance) * this.speed;
                this.velocity.y = (this.dy / this.distance) * this.speed;
                this.x += this.velocity.x;
                this.y += this.velocity.y;
            }
        },

        Draw: function () {
            context.beginPath();
            context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
            context.fillStyle = this.color;
            context.fill();
            context.closePath();
        }
    };

    function Particle() {
        this.x = canvas.width / 2;
        this.y = canvas.height / 2;
        this.radius = 4;
        this.color = colors[Math.round(Math.random() * (colors.length + 1))];

        this.velocity = { x: (Math.random() < 0.5 ? -1 : 1) * Math.random() * 10, y: (Math.random() < 0.5 ? -1 : 1) * Math.random() * 10 };
        this.speed = 25;
        this.active = true;
    }

    Particle.prototype = {
        Update: function () {
            if (Collapse) {
                this.dx = (canvas.width / 2) - this.x;
                this.dy = (canvas.height / 2) - this.y;
                this.distance = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
                this.velocity.x = (this.dx / this.distance) * this.speed;
                this.velocity.y = (this.dy / this.distance) * this.speed;
                this.x += this.velocity.x;
                this.y += this.velocity.y;

                if (this.x > (canvas.width / 2) && this.x - (canvas.width / 2) <= 15 || this.x < (canvas.width / 2) && (canvas.width / 2) - this.x <= 15) {
                    if (this.y > (canvas.height / 2) && this.y - (canvas.height / 2) <= 15 || this.y < (canvas.height / 2) && (canvas.height / 2) - this.y <= 15) {
                        this.active = false;
                    }
                }
            } else {
                this.x += this.velocity.x;
                this.y += this.velocity.y;
            }
        },

        Draw: function () {
            context.beginPath();
            context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
            context.lineWidth = 2.2;
            context.strokeStyle = this.color;
            context.stroke();
            context.closePath();
        }
    };

    function Update() {
        if (Particles.length < 100) {
            for (var x = Particles.length; x < 100; x++) {
                Particles.push(new Particle());
            }
        }

        if (Explode || Collapse) {
            Particles.forEach(function (particle) {
                particle.Update();
            });
        }

        Particles = Particles.filter(function (particle) {
            return particle.active;
        });

        if (State && !Explode) {
            Projectile.Update();
        }

        Render();
        requestAnimationFrame(Update);
    }

    function Render() {
        context.clearRect(0, 0, canvas.width, canvas.height);

        if (Collapse || Explode) {
            Particles.forEach(function (particle) {
                particle.Draw();
            });
        }

        if (State && !Explode) {
            Projectile.Draw();
        }
    }

    $('#Button').click(function () {
        State = !State;

        if (Explode && State == false) {
            Collapse = true;
        } else {
            Collapse = false;
            Particles = [];
        }

        if (State) {
            Projectile = new Proj();
        } else {
            Projectile = null;
            Explode = false;
        }

        if (!State) {
            $('.chat-holder-buttons').removeClass('active');
        }
        $(this).toggleClass('fa-fire');
        $(this).toggleClass('fa-times');
        const chatbtn = document.getElementById('Button');

        chatbtn.style.top = '15%';
        chatbtn.style.left = '10%';
    });

    $(document).ready(function () {
        Update();
    });

    $(window).resize(function () {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    document.querySelectorAll('.chat-holder-buttons button').forEach(button => {
        button.addEventListener('click', function () {
            let buttonType = this.querySelector('span').classList;
            let contentDiv = document.getElementById('content');

            contentDiv.innerHTML = '';

            let newDiv = document.createElement('div');

            switch (true) {
                case buttonType.contains('fa-heart'):
                    newDiv.innerHTML = `<h2>Bloodwork Chat</h2><p></p>`;
                    break;
                case buttonType.contains('fa-hourglass-half'):
                    newDiv.innerHTML = `<h2>Fasting Chat</h2><p></p>`;
                    break;
                case buttonType.contains('fa-spoon'):
                    newDiv.innerHTML = `<h2>Diet Chat</h2><p></p>`;
                    break;
                case buttonType.contains('fa-asterisk'):
                    newDiv.innerHTML = `<h2>Workout Chat</h2><p></p>`;
                    break;
                default:
                    newDiv.innerHTML = `<h2>Error</h2><p>Unhandled</p>`;
            }
            $('#Button').click();

            contentDiv.appendChild(newDiv);
            const userChatForm = document.getElementById('promptForm');
            userChatForm.style.display = 'flex';
            const outputForm = document.getElementById('chatOutput');
            outputForm.style.overflow = 'scroll';
        });
    });

    $(document).ready(function () {
        const userChatForm = document.getElementById('promptForm');
        userChatForm.style.display = 'none';
    });

    document.getElementById('promptInput').addEventListener('input', function () {
        this.style.height = 'auto'; // Reset the height
        this.style.height = Math.min(this.scrollHeight, 150) + 'px'; // Set height based on content, up to a max
    });


    document.getElementById('promptForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const inputField = document.getElementById('promptInput');
        const prompt = inputField.value.trim(); // Get the value of the textarea

        if (!prompt) {
            alert("Please enter a question.");
            return;
        }

        const spinner = document.getElementById('spinner');
        const buttonText = document.getElementById('buttonText');
        const sendButton = document.getElementById('sendButton');

        inputField.value = '';
        inputField.style.height = '50px';
        inputField.disabled = true;
        spinner.style.display = 'inline-block';
        spinner.style.color = 'darkgoldenrod';
        sendButton.style.backgroundColor = 'goldenrod';
        buttonText.textContent = 'Loading...';
        sendButton.disabled = true;

        const userMessage = document.createElement('div');
        userMessage.className = 'message user-message';
        userMessage.textContent = prompt;
        document.getElementById('chatOutput').appendChild(userMessage);

        // Using $.ajax to make the request
        $.ajax({
            url: '/api/Chat/ChatConnector', // Change the URL to your desired route
            type: 'POST',
            contentType: 'text/plain', // Set the content type to plain text
            data: prompt, // Send the string directly
            success: function (data) {
                if (data.success) {
                    const botMessage = document.createElement('div');
                    botMessage.className = 'message bot-message';
                    botMessage.innerHTML = `<div class="response-content">${data.message}</div>`;
                    document.getElementById('chatOutput').appendChild(botMessage);
                } else {
                    displayErrorMessage(`Error: ${data.message}`);
                }
                resetUI();
            },
            error: function (xhr, status, error) {
                displayErrorMessage("An error occurred while fetching the chat response.");
                resetUI();
            }
        });
    });

    function displayErrorMessage(message) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.innerHTML = `<strong>${message}</strong>`;
        document.getElementById('chatOutput').appendChild(errorMessage);
    }



    function resetUI() {
        const inputField = document.getElementById('promptInput');
        const spinner = document.getElementById('spinner');
        const buttonText = document.getElementById('buttonText');
        const sendButton = document.getElementById('sendButton');

        inputField.disabled = false;
        spinner.style.display = 'none';
        buttonText.textContent = 'Send';
        sendButton.disabled = false;
    }



    function displayErrorMessage(message) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'alert alert-danger';
        errorMessage.setAttribute('role', 'alert');
        errorMessage.innerHTML = message;
        document.getElementById('chatOutput').appendChild(errorMessage);
    }

    function resetUI() {
        const inputField = document.getElementById('promptInput');

        spinner.style.display = 'none';
        buttonText.textContent = 'Send';
        sendButton.disabled = false;
        sendButton.style.backgroundColor = 'gold';
        inputField.disabled = false;
    }
</script>