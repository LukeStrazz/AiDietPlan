@{
    ViewData["Title"] = "Fasting Timer";
    var userID = User.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
}

<section class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8 col-sm-10">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-gradient-primary text-white text-center py-4">
                    <h2>Fasting Timer</h2>
                </div>
                <div class="card-body p-4">
                    <form id="timerForm" class="row gx-3 gy-2 align-items-center">
                        <input type="hidden" id="userID" value="@userID" />

                        <div class="col-4 text-center">
                            <label for="hours" class="form-label">Hours</label>
                            <input type="number"
                                   id="hours"
                                   name="Hours"
                                   min="0"
                                   placeholder="0"
                                   class="form-control form-control-lg text-center shadow-sm" />
                        </div>
                        <div class="col-4 text-center">
                            <label for="minutes" class="form-label">Minutes</label>
                            <input type="number"
                                   id="minutes"
                                   name="Minutes"
                                   min="0"
                                   placeholder="0"
                                   class="form-control form-control-lg text-center shadow-sm" />
                        </div>
                        <div class="col-4 text-center">
                            <label for="seconds" class="form-label">Seconds</label>
                            <input type="number"
                                   id="seconds"
                                   name="Seconds"
                                   min="0"
                                   placeholder="0"
                                   class="form-control form-control-lg text-center shadow-sm" />
                        </div>
                        <div class="col-12 text-center mt-4">
                            <button type="button" class="btn btn-primary btn-lg px-5 py-3 shadow" id="startTimer">Start Timer</button>
                        </div>
                    </form>

                    <div id="circle-container" class="mt-5 text-center position-relative">
                        <div id="circle">
                            <div id="circle-text">00:00:00</div>
                            <svg>
                                <circle cx="50%" cy="50%" r="45%" stroke-linecap="round"></circle>
                            </svg>
                        </div>
                    </div>

                    <div class="col-12 text-center mt-5">
                        <button type="button" class="btn btn-danger btn-lg px-5 py-3 shadow" id="resetTimer">Reset Timer</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .card {
        border-radius: 1rem;
        background: linear-gradient(to bottom right, #1a1a1a, #333);
    }

    .card-header {
        background: linear-gradient(to right, #28a745, #218838);
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }

    #circle-container {
        position: relative;
        width: 250px;
        height: 250px;
        margin: auto;
    }

    #circle {
        position: relative;
        width: 100%;
        height: 100%;
        background: radial-gradient(circle at 50%, rgba(0, 255, 0, 0.2), transparent);
        border-radius: 50%;
        box-shadow: 0 0 20px rgba(40, 167, 69, 0.3);
    }

        #circle svg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            transform: rotate(-90deg);
        }

        #circle circle {
            fill: none;
            stroke: #28a745;
            stroke-width: 10;
            stroke-dasharray: 180;
            stroke-dashoffset: 180;
            transition: stroke-dashoffset 1s linear;
        }

    #circle-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        font-weight: bold;
        color: #28a745;
        text-shadow: 1px 1px 5px rgba(40, 167, 69, 0.5);
    }

    .btn {
        border-radius: 30px;
        font-size: 1.2rem;
    }

    .btn-primary {
        background-color: #28a745;
        border: none;
    }

    .btn-danger {
        background-color: #dc3545;
        border: none;
    }

    .form-control-lg {
        border-radius: 1rem;
    }

    .shadow-sm {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
</style>

<script>
    var hours = 0;
    var minutes = 0;
    var seconds = 0;
    var interval = null;
    var endTime = null;

    document.getElementById('hours').addEventListener('change', e => {
        hours = +e.target.value;
    });

    document.getElementById('minutes').addEventListener('change', e => {
        minutes = +e.target.value;
    });

    document.getElementById('seconds').addEventListener('change', e => {
        seconds = +e.target.value;
    });

    document.getElementById('startTimer').addEventListener('click', () => {
        if (hours < 0 || minutes < 0 || seconds < 0) {
            alert("Please enter valid non-negative number.");
            return;
        }

        var timeInSeconds = (hours * 60 * 60) + (minutes * 60) + seconds;

        if (timeInSeconds === 0) {
            alert("Please enter a valid time.");
            return;
        }

        var userID = document.getElementById('userID').value;
        var now = new Date().toISOString();
        var end = new Date(Date.now() + timeInSeconds * 1000).toISOString();

        fetch('/api/FastingController/SaveTime', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                Hours: hours,
                Minutes: minutes,
                Seconds: seconds,
                userID: userID,
                start: now,
                end: end
            })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    var startTime = new Date(result.startTime).getTime();
                    endTime = startTime + timeInSeconds * 1000;
                    startTimer(timeInSeconds);

                    window.location.reload();
                } else {
                    alert("Error: " + result.message);
                }
            })
            .catch(error => {
                console.error('Error during fetch:', error);
                alert("Error: There is an active timer, please reset the timer and try again.");
            });
    });

    function startTimer(totalSeconds) {
        var displayTime = () => {
            var now = new Date().getTime();
            var remaining = Math.floor((endTime - now) / 1000);

            if (remaining <= 0) {
                clearInterval(interval);
                document.getElementById("circle-text").innerHTML = '00:00:00';
                updateCircleProgress(1);
                return;
            }

            var displayHours = Math.floor(remaining / (60 * 60));
            var remainder = remaining - (displayHours * 60 * 60);
            var displayMinutes = Math.floor(remainder / 60);
            var displaySeconds = remainder - (displayMinutes * 60);

            document.getElementById("circle-text").innerHTML =
                (displayHours < 10 ? "0" : "") + displayHours + ":" +
                (displayMinutes < 10 ? "0" : "") + displayMinutes + ":" +
                (displaySeconds < 10 ? "0" : "") + displaySeconds;

            var secondsInMinute = remaining % 60;
            var progress = secondsInMinute / 60;
            updateCircleProgress(progress);
        };

        if (interval) clearInterval(interval);

        interval = setInterval(displayTime, 1000);
    }

    function updateCircleProgress(progress) {
        var circle = document.querySelector('#circle circle');
        var radius = circle.r.baseVal.value;
        var circumference = 2 * Math.PI * radius;
        var offset = circumference * (1 - progress);
        circle.style.strokeDashoffset = offset;
    }

    document.getElementById('resetTimer').addEventListener('click', () => {
        if (interval) {
            clearInterval(interval);
            interval = null;
        }
        document.getElementById('circle-text').innerHTML = '00:00:00';
        updateCircleProgress(0);

        var userID = document.getElementById('userID').value;

        fetch(`/api/FastingController/ResetFastingSession?userID=${userID}`, {
            method: 'POST'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    console.log('Fasting session reset successfully');
                } else {
                    console.error('Failed to reset fasting session:', result.message);
                }
            })
            .catch(error => {
                console.error('Error during fetch:', error);
            });
    });

    document.addEventListener('DOMContentLoaded', () => {
        var userID = document.getElementById('userID').value;

        fetch('/api/FastingController/GetFastingSession?userID=' + userID)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    var remainingTime = result.remainingTime * 1000;
                    endTime = Date.now() + remainingTime;
                    startTimer(remainingTime / 1000);
                } else {
                    console.error('Failed to retrieve fasting session:', result.message);
                }
            })
            .catch(error => {
                console.error('Error during fetch:', error);
            });
    });
</script>
 