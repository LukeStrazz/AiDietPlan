@model IEnumerable<Services.ViewModels.GoalViewModel>

@{
    ViewData["Title"] = "Goals";
}

<section>
    <h2>You can create a goal</h2>
    <form id="goalForm" class="row gx-3 gy-2 align-items-center">
        <hr class="rounded">
        <div class="col-sm-3">
            <label class="visually-hidden" for="specificSizeInputName">Weight</label>
            <input type="number"
                   class="form-control"
                   id="targetWeight"
                   placeholder="Target Weight"
                   min="50"
                   max="700" />
        </div>

        <div class="col-sm-3">
            <label class="visually-hidden" for="specificSizeInputGroupUsername">Start Date</label>
            <div class="input-group">
                <div class="input-group-text"></div>
                <input type="date"
                       class="form-control"
                       id="startDate"
                       placeholder="Start Date" />
            </div>
        </div>


        <div class="col-sm-3">
            <label class="visually-hidden" for="specificSizeInputGroupUsername">End Date</label>
            <div class="input-group">
                <div class="input-group-text"></div>
                <input type="date"
                       class="form-control"
                       id="endDate"
                       placeholder="End Date" />
            </div>
        </div>

        <div class="col-auto">
            <button id="submit" type="submit" class="btn btn-primary">Submit</button>
        </div>

        <div class="mb-3">
        <textarea 
                class="form-control"
                id="description"
                placeholder="Please enter description for your goal"
                ></textarea>
        </div>
       


    </form>


</section>
@if (Model.Any())
{

    <section>
        <h2>Your Goals</h2>
        <div class="row">
            @foreach (var goal in Model)
            {
                <div class="col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Goal Description</h5>
                            <p class="card-text">@goal.Description</p>
                            <p class="card-text"><strong>Start Date:</strong> @goal.startingGoalDate.ToShortDateString()</p>
                            <p class="card-text"><strong>End Date:</strong> @goal.endGoalDate.ToShortDateString()</p>
                            <p class="card-text"><strong>Status:</strong> @(goal.resolved ? "Resolved" : "In Progress")</p>
                            <form id="idF" method="post" action="/Goal/ResolveGoal">
                                <input id="goalId" type="hidden" name="goalId" value="@goal.userSecretId" />
                                <button type="submit" class="btn btn-success" @(goal.resolved ? "disabled" : "")>
                                    Resolve Goal
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}

<script>

    const goalForm = document.getElementById("goalForm");
    
    goalForm.addEventListener("submit", function(event){
    event.preventDefault();

    const goalId = 999; //Replace hardcoded value with goalID
    const userSecretId = "192"; //get userSecretId to replace hardcoded value
    const resolved = false; //initial resolved value is false
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;
    const description = document.getElementById("description").value;
    const targetWeight = document.getElementById("targetWeight").value; //add targetWeight to db


    if(!targetWeight || !startDate || !endDate || !description){
        alert("Please fill out all required fields.");
        return;
    }

    const goalInfo = {
        goalId: parseInt(goalId),
        userSecretId: userSecretId, 
        resolved: resolved,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        description: description
    };

    const goalData = JSON.stringify(goalInfo);

    const url = "/api/GoalController/CreateGoal";

    
    

    fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: goalData
    })
    .then(response => response.json()).then(data => alert("succes " + data)).catch(error => alert("error " + error)); 




    });
        
         
    
    /* TODO: Ajax calls for: 
    api/GoalController/CrateGoal to make a goal,<-- Connect to "Submit" button IF all fields are not null
    api/GoalController/UpdateGoal/id to update a goal, <-- Connect to "Update" button IF description is updated (HTML is not made for this yet) USE view model of goal
    api/GoalController/ResolveGoal/id to resolve a goal,  <-- Connect to "Status" button IF clicked, mark goal as resolved/ complete USING ID of goal

    Ajax call done in "User.cshtml" for referance!
    */
</script>