@model Services.ViewModels.UserInfoViewModel

<section>
    <h2>Create a New Goal</h2>
    <form id="goalForm" class="row gx-2 gy-1 align-items-center">
        <input type="hidden" id="userSecretId" value="@Model.Sid" />
        <hr class="rounded">

        <div class="col-sm-3 mb-2">
            <label for="targetWeight">Target Weight</label>
            <input type="number" class="form-control" id="targetWeight" placeholder="Please enter your target weight" min="50" max="700" />
        </div>

        <div class="col-sm-3 mb-2">
            <label for="startDate">Start Date</label>
            <input type="date" class="form-control" id="startDate" placeholder="Start Date" />
        </div>

        <div class="col-sm-3 mb-2">
            <label for="endDate">End Date</label>
            <input type="date" class="form-control" id="endDate" placeholder="End Date" />
        </div>

        <div class="col-sm-10 mb-2">
            <label for="description">Description</label>
            <textarea class="form-control" id="description" placeholder="Please enter description for your goal."></textarea>
        </div>

        <div class="col-sm-2">
            <button id="submit" type="submit" class="btn btn-primary mb-3 ml-3">Submit</button>
        </div>
        <hr class="rounded">
    </form>
</section>

<h4>Goals in progress</h4>
@if (Model.Goals?.Any() == true)
{
    <ul>
        @foreach (var goal in Model.Goals)
        {
            @if(@goal.resolved == false){
            <div class="card w-50 mb-2">
                <div class="card-body">
                    <h5 class="card-title">GOAL</h5>
                    <hr class="rounded">
                    @if(goal.targetWeight.HasValue && goal.targetWeight.Value != 0){
                    <label for="targetWeight">Target Weight:</label>
                    <input type="number" id="targetWeight-@goal.GoalId" value="@goal.targetWeight" /> }<br><br>
                    <label for="startDate">   Start Date    : </label>
                    <input type="date" id="startDate-@goal.GoalId" value="@goal.startingGoalDate" /><br><br>
                    <label for="endDate">End Date    : </label>
                    <input type="date" id="endDate-@goal.GoalId" value="@goal.endGoalDate" /><br><br>
                    <label for="description">Description:</label>
                    <input type="text" id="description-@goal.GoalId" value="@goal.Description" /><br><br>
                    <input type="hidden" id="userSecretID-@goal.GoalId" value="@Model.Sid" />
                    <input type="hidden" id="resolved-@goal.GoalId" value="@goal.resolved" />
                    <input type="hidden" id="goalId-@goal.GoalId" value="@goal.GoalId" />
                    <input type="hidden" id="currentWight-@goal.GoalId" value="@Model.CurrentWeight" />
                    <a href="#" class="btn btn-primary resolve-goal-btn" data-goalid="@goal.GoalId">Resolve</a>
                    <a href="#" class="btn btn-primary edit-goal-btn" data-goalid="@goal.GoalId">Update</a>
                    <br>
                </div>
            </div>
            
                var startDate = goal.startingGoalDate;
                var endDate = goal.endGoalDate;
                var currentDate = DateTime.Now;

                var totalDays = (endDate - startDate).TotalDays;
                var pastDays = (currentDate - startDate).TotalDays;

                var progressPercentage = totalDays > 0 ? pastDays/totalDays * 100 : 31;


            <div class="progress mb-2">
                <div class="progress-bar bg-success" style="width: @progressPercentage%">@progressPercentage</div><br><br><br><br>
                <hr class="rounded">
                
            </div>
            }
        }
    </ul>
}
else
{
    <p>You don't have any goals yet. Create one above!</p>
}


<script>
    document.getElementById("goalForm").addEventListener("submit", function(event) {
        event.preventDefault();

        const goalData = {
            userSecretId: document.getElementById("userSecretId").value,
            resolved: false,
            startDate: document.getElementById("startDate").value,
            endDate: document.getElementById("endDate").value,
            description: document.getElementById("description").value,
            targetWeight: document.getElementById("targetWeight").value
        };

        if (!goalData.startDate || !goalData.endDate || !goalData.description) {
            alert("Please fill out all required fields.");
            return;
        }

        fetch("/api/GoalController/CreateGoal", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(goalData)
        })
        .then(response => response.ok ? response.json() : Promise.reject(response.text()))
        .then(data => alert("Success: " + data))
        .catch(response => response.text().then(errorMessage => alert("Error: " + errorMessage)));
    });

    document.querySelectorAll('.resolve-goal-btn').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();

            const goalId = this.getAttribute('data-goalid');
            const userSecretId = document.getElementById(`userSecretID-${goalId}`).value;
            const startDate = document.getElementById(`startDate-${goalId}`).value;
            const endDate = document.getElementById(`endDate-${goalId}`).value;
            const description = document.getElementById(`description-${goalId}`).value;
            const targetWeight = document.getElementById(`targetWeight-${goalId}`).value;

            const goalDataResolve = {
                goalId: goalId,
                userSecretId: userSecretId,
                startDate: startDate,
                endDate: endDate,
                description: description,
                targetWeight: targetWeight
            };

            fetch("/api/GoalController/ResolveGoal", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(goalDataResolve)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                return response.json();
            })
            .then(data => alert(data.message))
            .catch(error => alert("Error: " + error.message));
        });
    });

    document.querySelectorAll('.edit-goal-btn').forEach(button => {
        button.addEventListener('click', function(event) {
            event.preventDefault();

            const goalId = this.getAttribute('data-goalid');
            const userSecretId = document.getElementById(`userSecretID-${goalId}`).value;
            const startDate = document.getElementById(`startDate-${goalId}`).value;
            const endDate = document.getElementById(`endDate-${goalId}`).value;
            const description = document.getElementById(`description-${goalId}`).value;
            const targetWeight = document.getElementById(`targetWeight-${goalId}`).value;

            const goalDataEdit = {
                goalId: goalId,
                userSecretId: userSecretId,
                startDate: startDate,
                endDate: endDate,
                description: description,
                targetWeight: targetWeight
            };

            fetch("/api/GoalController/UpdateGoal", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(goalDataEdit)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text); });
                }
                return response.json();
            })
            .then(data => alert(data.message))
            .catch(error => alert("Error: " + error.message));
        });
    });
</script>